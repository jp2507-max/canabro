---
description: Canonical, always-applied mobile app tech stack, architecture, workflows, and conventions for CanaBro (Expo + React Native)
alwaysApply: true
---

# CanaBro Mobile App Tech Stack & Engineering Rules (up to date)

## Tech stack (versions from [package.json](mdc:package.json))
- **React**: 19.0.0
- **React Native**: 0.79.5
- **Expo SDK**: 53.0.20
- **Expo Router**: ~5.1.3
- **TypeScript**: ~5.8.3 (strict)
- **NativeWind**: ^4.1.23 + **TailwindCSS**: ^3.4.0
- **Reanimated**: ~3.19.0
- **TanStack React Query**: ^5.x
- **WatermelonDB**: ^0.28.0
- **Supabase JS**: ^2.49.x
- **React Hook Form**: ^7.55.x
- **i18next / react-i18next**: ^25.x / ^15.x
- **Sentry RN**: ^6.18.x
- **Shopify FlashList**: ^2.0.0

## Project architecture & navigation
- **File-based routing** via Expo Router v5 under `app/` with grouped layouts.
  - Root layouts: `[app/(app)/_layout.tsx](mdc:app/(app)/_layout.tsx)`, `[app/(auth)/_layout.tsx](mdc:app/(auth)/_layout.tsx)`, `[app/+not-found.tsx](mdc:app/+not-found.tsx)`
- **Screen examples**: `app/(app)/(tabs)/index.tsx`, `app/(app)/plant/[id].tsx`, `app/(app)/(tabs)/calendar/index.tsx`.
- **Structure convention** per screen file: main export, subcomponents, helpers, types.

## State, data, and sync
- **Server state**: TanStack Query v5. Use clear, nested query keys and appropriate cache times.
- **Local DB**: WatermelonDB used for offline-first data and relationships.
  - Entrypoints: `[lib/database/database.ts](mdc:lib/database/database.ts)`, `[lib/models/schema.ts](mdc:lib/models/schema.ts)`
- **Sync & services**: Supabase-backed synchronization and domain services.
  - Examples: `[lib/services/sync/core-sync.ts](mdc:lib/services/sync/core-sync.ts)`, `[lib/contexts/DatabaseProvider.tsx](mdc:lib/contexts/DatabaseProvider.tsx)`, `[lib/contexts/SyncContext.tsx](mdc:lib/contexts/SyncContext.tsx)`
- **Backend**: Supabase for auth, DB, realtime, and storage. Use Supabase MCP to see tables and apply migrations

## Styling and theming
- **Only NativeWind v4**. No inline/hardcoded colors. Use semantic tokens.
  - Theme sources: `[global.css](mdc:global.css)`, `[tailwind.config.js](mdc:tailwind.config.js)`, `[nativewind-env.d.ts](mdc:nativewind-env.d.ts)`
- **Themed components**: Use `[components/ui/ThemedView.tsx](mdc:components/ui/ThemedView.tsx)` and `[components/ui/ThemedText.tsx](mdc:components/ui/ThemedText.tsx)` for app surfaces/typography.
- **Safe areas**: Prefer classes `pt-safe`, `pb-safe`, `h-screen-safe` from `global.css`.
- **Dark mode**: Use `dark:` variants; avoid conditional inline styles.

## Animations
- **Reanimated v3.19.0+** with automatic workletization for hooks.
  - Still add `'worklet'` to: animation callback functions (e.g., third arg to `withSpring`/`withTiming`), imported/external functions used in worklets, conditional expressions that run on UI, and `runOnUI` bodies.
  - Never access `.value` outside worklets. Cancel animations on unmount.
  - Reuse via: `[lib/animations/index.ts](mdc:lib/animations/index.ts)` and other hooks under `lib/animations/`.
  - Reference: [reanimated-best-practices.instructions.md](mdc:.github/instructions/reanimated-best-practices.instructions.md)

## Key utilities and components
- **Haptics**: `[lib/utils/haptics.ts](mdc:lib/utils/haptics.ts)`
- **Image selection/upload**: `[lib/utils/image-picker.ts](mdc:lib/utils/image-picker.ts)`, `[lib/utils/upload-image.ts](mdc:lib/utils/upload-image.ts)`
- **Keyboard**: `[components/keyboard/EnhancedKeyboardWrapper.tsx](mdc:components/keyboard/EnhancedKeyboardWrapper.tsx)`
- **Enhanced inputs**: `[components/ui/EnhancedTextInput.tsx](mdc:components/ui/EnhancedTextInput.tsx)`
- **Logging**: `[lib/utils/logger.ts](mdc:lib/utils/logger.ts)`; console statements are stripped in prod via Babel plugin
- **Lists**: FlashList wrapper `[components/ui/FlashListWrapper.tsx](mdc:components/ui/FlashListWrapper.tsx)` and performance helpers `[lib/utils/flashlist-performance.ts](mdc:lib/utils/flashlist-performance.ts)`
- **Utilities index**: `[lib/utils/index.ts](mdc:lib/utils/index.ts)`
- **Custom components guidelines**: [custom-components.instructions.md](mdc:.github/instructions/custom-components.instructions.md)

## Internationalization (i18n)
- **Config**: `[lib/config/i18n.ts](mdc:lib/config/i18n.ts)`
- **Translations**: `[lib/locales/en.json](mdc:lib/locales/en.json)`, `[lib/locales/de.json](mdc:lib/locales/de.json)`; additional namespaced files live under `lib/locales/en/*.json`
- **Hooks**: `[lib/hooks/useTranslation.ts](mdc:lib/hooks/useTranslation.ts)`, `[lib/hooks/useI18n.ts](mdc:lib/hooks/useI18n.ts)`
- **UI**: `[components/ui/LanguageToggle.tsx](mdc:components/ui/LanguageToggle.tsx)`
- **Validation**: `npm run validate:translations` → `[scripts/validate-translations.js](mdc:scripts/validate-translations.js)`
- **Rule**: All production user-facing strings must use translations. Do not use hardcoded literals in production code. Exceptions: test files (`**/__tests__/**`), scripts (`scripts/**`), and clearly dev-only components (e.g., `[components/ui/DebugPanel.tsx](mdc:components/ui/DebugPanel.tsx)`, `[components/DevModeIndicator.tsx](mdc:components/DevModeIndicator.tsx)`).
- **Linting**: Enforce via `eslint-plugin-i18next` (see `eslint.config.mjs`). Disable only for allowed exceptions.

### Strict i18n (always-on)

- **No inline strings**: All user-facing copy must come from i18n keys in production components/services.
- **Namespacing**: Add keys under clear namespaces (e.g., `guidance.*`, `tasks.*`). Prefer existing namespaces before adding new.
- **Dual-language updates**: For new features, update both `[lib/locales/en.json](mdc:lib/locales/en.json)` and `[lib/locales/de.json](mdc:lib/locales/de.json)` in the same edit.
- **Placeholders**: Keep variables as placeholders in translations (e.g., `{{count}}`, `{{date}}`).
- **Validation**: Run `npm run validate:translations` pre-commit to ensure key parity and no missing strings.
- **Dev-only exceptions**: Edge cases and dev-only strings must be confined to dev components or clearly commented.

## Developer workflows
- **Build & release**: EAS Build configured in `[eas.json](mdc:eas.json)`. OTA via `expo-updates`.
  - Common commands: `npm run android`, `npm run ios`, `npm run start`, `npm run prebuild`
- **Type checks**: `npx tsc --noEmit`
- **Lint/format**: `npm run lint`, `npm run lint:fix`, `npm run format`
- **Testing**: Jest + RN Testing Library
  - Commands: `npm test`, `npm run test:watch`, `npm run test:coverage`
  - Examples live under `components/**/__tests__` and `lib/**/__tests__`
- **Supabase dev**:
  - Use Supabase MCP tools exclusively for migrations and database operations (DDL/DML), management, and queries. Do not use the Supabase CLI for applying migrations or executing SQL.
- **Translations**: `npm run validate:translations` → `[scripts/validate-translations.js](mdc:scripts/validate-translations.js)`
- **UI/UX audits**: `[scripts/ui-refinement-plan.md](mdc:scripts/ui-refinement-plan.md)`, `[scripts/design-audit-checklist.md](mdc:scripts/design-audit-checklist.md)`

## Patterns and conventions
- **Data**: Use TanStack Query for all server state. Define stable query keys; prefer optimistic updates where safe. Add error boundaries for critical trees.
- **Navigation**: File-based only; use dynamic segments and params; handle deep links.
- **Accessibility**: Provide a11y roles/labels and screen-reader support.
- **Mobile-first**: Test on iOS/Android, light/dark modes. Use safe area utilities.
- **Internationalization**: Prefer `react-i18next`. All production UI must use `useTranslation()` keys; validate keys with the translation script.

## Monitoring and analytics
- **Error monitoring (Sentry React Native)**:
  - **SDK/Plugin**: `@sentry/react-native` (^6.18.x) with Expo plugin configured in `[app.config.js](mdc:app.config.js)` under `plugins: ['@sentry/react-native/expo', ...]`.
  - **Initialization**: `Sentry.init(...)` runs early in `[app/_layout.tsx](mdc:app/_layout.tsx)`.
    - Current options include `sendDefaultPii: true`, `mobileReplayIntegration`, and `feedbackIntegration`.
    - Recommendation: move DSN to an env-driven value (e.g., `process.env.EXPO_PUBLIC_SENTRY_DSN`) instead of hardcoding.
  - **Release mapping & source maps**: handled via `[metro.config.js](mdc:metro.config.js)` using `getSentryExpoConfig` and the Expo Sentry plugin. Ensure EAS secrets: `SENTRY_AUTH_TOKEN` (required), and optionally `SENTRY_ORG`, `SENTRY_PROJECT` if not set in `app.config.js`.
  - **User context**: set/unset on auth changes (e.g., inside `[lib/contexts/AuthProvider.tsx](mdc:lib/contexts/AuthProvider.tsx)`) using `Sentry.setUser({ id, email })` and `Sentry.setTag('role', ...)`.
  - **Sampling & privacy**: tune replay and tracing rates for production (e.g., `replaysSessionSampleRate: 0.01`, `replaysOnErrorSampleRate: 1`). Review `sendDefaultPii` based on GDPR/consent.
  - **Verification**:
    - Dev throw: `Sentry.captureException(new Error('Sentry test'))` from a dev-only button.
    - Build-time: run EAS build and confirm uploaded source maps in Sentry release.
  - **Preferred logging**: Use `[lib/utils/logger.ts](mdc:lib/utils/logger.ts)` for app logs; reserve `Sentry.captureException` for noteworthy errors.

## Build/Release references and CI
- **EAS Build profiles**: development/preview/production in `[eas.json](mdc:eas.json)`.
- **Expo Updates**: Managed via `expo-updates` dependency for OTA updates.
- **CI/CD**: Keep pipelines green; block merges on test failures. Pipeline docs/tasks live under `tasks/`.

## Do and Don't quick rules for agents
- **Do**: Reuse existing utilities/components before creating new ones.
- **Do**: Use semantic color tokens and NativeWind classes; keep styles in JSX className, not inline.
- **Do**: Break features into reusable modules with clear names and strict types.
- **Do**: Reference files with `mdc:` links in rules and docs.
- **Do**: Fetch fresh info via Brave Search + Context7 MCP when recency matters.

- **Don’t**: Guess about current versions/APIs; verify with MCP first.
- **Don't**: Hardcode colors/styles, duplicate logic, or access Reanimated shared values off the UI thread.
- **Don't**: Assume APIs—verify with current docs (see below).

## Documentation & research
- Prefer official docs and recent examples. When implementing or upgrading libraries, verify current APIs and breaking changes.
- Use these workspace references:
  - [Nativewind Theming Best Practices.instructions.md](mdc:.github/instructions/Nativewind Theming Best Practices.instructions.md)
  - [reanimated-best-practices.instructions.md](mdc:.github/instructions/reanimated-best-practices.instructions.md)
  - [custom-components.instructions.md](mdc:.github/instructions/custom-components.instructions.md)
  - [Taskmaster Dev Workflow](mdc:.cursor/rules/taskmaster/dev_workflow.mdc)
  - [Taskmaster Tooling Reference](mdc:.cursor/rules/taskmaster/taskmaster.mdc)
  - [PRD](mdc:.taskmaster/docs/prd.txt)
  - [Cursor Rules](mdc:.cursor/rules/cursor_rules.mdc)

---
If anything here drifts from the codebase, update this rule to stay source-of-truth and keep it under 500 lines.